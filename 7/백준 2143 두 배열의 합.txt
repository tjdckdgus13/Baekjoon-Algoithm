package com.kh.first.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;

public class BAEKJOON {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;

		int T = Integer.parseInt(br.readLine()); // 합

		int N = Integer.parseInt(br.readLine()); // 숫자 개수
		int[] a = new int[N];
		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			a[i] = Integer.parseInt(st.nextToken());
		}

		int M = Integer.parseInt(br.readLine()); // 숫자 개수
		int[] b = new int[M];
		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < M; i++) {
			b[i] = Integer.parseInt(st.nextToken());
		}

		List<Integer> LN = new ArrayList<Integer>();
		List<Integer> LM = new ArrayList<Integer>();

		for (int i = 0; i < N; i++) {
			int sum = 0;
			for (int j = i; j < N; j++) {
				sum += a[j];
				LN.add(sum);
			}
		}

		for (int i = 0; i < M; i++) {
			int sum = 0;
			for (int j = i; j < M; j++) {
				sum += b[j];
				LM.add(sum);
			}
		}

		Collections.sort(LN);
		Collections.sort(LM);

		int pa = 0;
		int pb = LM.size() - 1;
		long count = 0;

		while (pa < LN.size() && pb >= 0) {

			long sum = LN.get(pa) + LM.get(pb);

			if (sum == T) {

				int na = LN.get(pa);
				int mb = LM.get(pb);
				long Acount = 0;
				long Bcount = 0;

				while (pa < LN.size() && LN.get(pa) == na) {
					Acount++;
					pa++;
				}

				while (pb >= 0 && LM.get(pb) == mb) {
					Bcount++;
					pb--;
				}

				count += Acount * Bcount;
			}

			else if (sum < T) {
				pa++;
			}

			else if (sum > T) {
				pb--;
			}
		}

		System.out.println(count);
	}
}
